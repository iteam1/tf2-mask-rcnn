# convert labelme3.0 to coco
python3 labelme3_labelme.py dataset/dataset_crack_line_near_edge/train
python3 labelme3_labelme.py dataset/dataset_crack_line_near_edge/test

*Note: Outside the docker
dst_test_crack_line


python3 labelme2coco.py dst_train_crack_line \
--output dataset/dataset_crack_line_near_edge/train.json

python3 labelme2coco.py dst_test_crack_line \
--output dataset/dataset_crack_line_near_edge/test.json

# export tfrecord
python create_coco_tf_record.py --logtostderr \
--train_image_dir=dataset/dataset_crack_line_near_edge/train \
--test_image_dir=dataset/dataset_crack_line_near_edge/test \
--train_annotations_file=dataset/dataset_crack_line_near_edge/train.json \
--test_annotations_file=dataset/dataset_crack_line_near_edge/test.json \
--output_dir=dataset_training_crack_line

# train model
CUDA_VISIBLE_DEVICES=0 python3 models/research/object_detection/model_main_tf2.py --logtostderr --model_dir=training/ --pipeline_config_path=pipeline.config

CUDA_VISIBLE_DEVICES=1 python models/research/object_detection/model_main.py --logtostderr --model_dir=training/ --pipeline_config_path=mask_rcnn_inception_v2_coco.config

# export model

CUDA_VISIBLE_DEVICES=1 python3 models/research/object_detection/exporter_main_v2.py \
    --trained_checkpoint_dir training \
    --output_directory inference_graph \
    --pipeline_config_path pipeline.config

CUDA_VISIBLE_DEVICES=1 python models/research/object_detection/export_inference_graph.py \
--input_type image_tensor \
--pipeline_config_path mask_rcnn_inception_v2_coco.config \
--trained_checkpoint_prefix checkpoints/model.ckpt-163085 --output_directory inference_graph



CUDA_VISIBLE_DEVICES=1 python models/research/object_detection/model_main.py --logtostderr --model_dir=training_crackline/ --pipeline_config_path=crack_line.config
